<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
  http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
  http://www.springframework.org/schema/context
  http://www.springframework.org/schema/context/spring-context-4.1.xsd
  http://www.springframework.org/schema/mvc
  http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
  http://www.springframework.org/schema/aop 
  http://www.springframework.org/schema/aop/spring-aop-4.1.xsd ">

	<!--返回json方式一 :这种方式有局限性，不灵活，一般不用 -->
	<!-- <mvc:annotation-driven> <mvc:message-converters register-defaults="false"> 
		避免IE执行AJAX时，返回JSON出现下载文件 <ref bean="stringConverter" /> <ref bean="fastjsonConverter" 
		/> </mvc:message-converters> </mvc:annotation-driven> -->

	<!-- 返回json方式二：推荐使用第二种方式， 这里和上面的 <mvc:annotation-driven> 只能出现一个 -->
	<!-- spring 3.1 之前替代 </mvc:annotation-driven> 的配置方式 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" 
		/> <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> 
		<property name="messageConverters"> <list> <ref bean="stringConverter" /> 
		<ref bean="fastjsonConverter" /> </list> </property> </bean> -->

	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="formatters">
			<set>
				<bean class="com.once.crosscloud.util.DateFormatter"></bean>
			</set>
		</property>
	</bean>

	<bean id="webBindingInitializer"
		class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
		<property name="conversionService" ref="conversionService"></property>
	</bean>

	<!-- spring 3.1 及之后替代 </mvc:annotation-driven> 的配置方式 -->
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="webBindingInitializer" ref="webBindingInitializer"></property>
		<property name="messageConverters">
			<list>
				<ref bean="stringConverter" />
				<ref bean="fastjsonConverter" />
			</list>
		</property>
	</bean>


	<!-- 启动对@AspectJ注解的支持 -->
	<!--通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<bean id="logAspect" class="com.once.crosscloud.util.LogAspect" />

	<!-- 默认扫描的包路径 -->
	<!-- 设置只扫描 @Controller注解的Bean,添加 use-default-filters="false",base-package即可配置为如下方式"com.webside" -->
	<context:component-scan base-package="com.once.crosscloud.*.controller"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<!-- 解析String请求数据 -->
	<bean id="stringConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 解析json请求数据，将json转换为java对象 -->
	<bean id="fastjsonConverter"
		class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<!-- 这里顺序不能反，一定先写text/html，不然ie下出现下载提示 -->
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
		<property name="features">
			<array value-type="com.alibaba.fastjson.serializer.SerializerFeature">
				<!-- 空值继续输出 -->
				<value>WriteMapNullValue</value>
				<!-- 防止循环引用 -->
				<value>DisableCircularReferenceDetect</value>
				<!-- 格式化日期,默认格式为：yyyy-MM-dd HH:mm:ss -->
				<value>WriteDateUseDateFormat</value>
			</array>
		</property>
	</bean>

	<!-- 防止循环引用 -->
	<bean id="DisableCircularReferenceDetect"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField"
			value="com.alibaba.fastjson.serializer.SerializerFeature.DisableCircularReferenceDetect"></property>
	</bean>


	<!-- ContentNegotiatingViewResolver视图解析器，返回多视图 -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1"></property>
		<!-- 这里是否忽略掉accept header，默认就是false -->
		<property name="ignoreAcceptHeader" value="true" />
		<!-- 启用参数支持 -->
		<property name="favorParameter" value="false"></property>
		<!-- 启用扩展名支持 -->
		<property name="favorPathExtension" value="true"></property>
		<!-- 如果所有的mediaType都没匹配上，就会使用defaultContentType -->
		<property name="defaultContentType" value="text/html" />

		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>

		<property name="defaultViews">
			<list>
				<!-- json视图 -->
				<bean class="com.alibaba.fastjson.support.spring.FastJsonJsonView">
					<property name="extractValueFromSingleKeyModel" value="true" />
					<property name="features">
						<array value-type="com.alibaba.fastjson.serializer.SerializerFeature">
							<!-- 空值继续输出 -->
							<value>WriteMapNullValue</value>
							<!-- 防止循环引用 -->
							<value>DisableCircularReferenceDetect</value>
							<!-- 格式化日期,默认格式为：yyyy-MM-dd HH:mm:ss -->
							<value>WriteDateUseDateFormat</value>
						</array>
					</property>
				</bean>
			</list>
		</property>

		<property name="viewResolvers">
			<list>
				<!-- 视图解析器，根据视图的名称new ModelAndView(name)，在配置文件查找对应的bean配置 -->
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />

				<bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="viewClass"
						value="org.springframework.web.servlet.view.JstlView" />
					<property name="contentType" value="text/html" />
					<property name="prefix" value="/" />
					<property name="suffix" value=".jsp" />
				</bean>

			</list>
		</property>

	</bean>

	<!-- 配置静态资源，这种方式效率相对比较低,如果DispatcherServlet拦截类似 *.do 这种格式的URL，就不存在访问不到静态资源的问题 -->
	<!-- <mvc:default-servlet-handler/> -->

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>


</beans>